{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/Game.ts","../../src/Solver.ts","../../src/stores.ts","../../src/game/Square.svelte","../../src/game/GameEnd.svelte","../../src/game/Info.svelte","../../src/game/Game.svelte","../../src/starting/StarterButton.svelte","../../src/starting/CustromStarter.svelte","../../src/starting/Starter.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.23.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","\n// interface for a single square\ninterface Square {\n    value: number;\n    mine: boolean;\n    revealed: boolean;\n    i: number;\n    j: number;\n    marked: boolean;\n}\n\n\n// relative indexes for neightbors\nconst neightbors: [number, number][] = [\n    [-1, -1],\n    [ 0, -1],\n    [ 1, -1],\n    [-1,  0],\n    [ 1,  0],\n    [-1,  1],\n    [ 0,  1],\n    [ 1,  1],\n];\n\nimport {iState} from \"./stores\";\n\ntype updaterT = (arg0: iState) => iState;\ntype updateFnT = (arg0: updaterT) => void;\n\n// game class itself\nclass Game {\n    width = 0;\n    height = 0;\n    mines = 0;\n\n    time: number;\n    marked = 0;\n    updateFn: updateFnT;\n    started = false;\n    updaterTask: number;\n\n    board: Square[][];\n    result: \"won\" | \"lost\" | null;\n\n    constructor(updateFn: updateFnT) {\n        this.updateFn = updateFn;\n    }\n\n    emptyBoard(): void {\n        this.board = Array<Array<Square>>(this.height);\n        for (let i = 0; i<this.height; i++) {\n            this.board[i] = Array<Square>(this.width);\n            for (let j = 0; j<this.width; j++) {\n                this.board[i][j] = {\n                    mine: false,\n                    value: 0,\n                    revealed: false,\n                    i,\n                    j,\n                    marked: false,\n                };\n            }\n        }\n    }\n\n    startGame(width: number, height: number, mines: number): void {\n        this.width = width;\n        this.height = height;\n        this.mines = mines;\n        this.started = false;\n        this.time = 0;\n        this.marked = 0;\n        this.result = null;\n        this.emptyBoard();\n    }\n\n    clearBoard(): void {\n        for (const row of this.board) {\n            for (const sq of row) {\n                sq.value = 0;\n                sq.mine = false;\n                sq.revealed = false;\n            }\n        }\n    }\n\n    placeMines(): void {\n        let placedMines = 0;\n        while (placedMines < this.mines) {\n            const i = Math.floor(Math.random() * this.height);\n            const j = Math.floor(Math.random() * this.width);\n            if (!this.board[i][j].mine) {\n                this.board[i][j].mine = true;\n                this.board[i][j].value = 99;\n                placedMines++;\n            }\n        }\n    }\n\n    getAdjacent(sq: Square): Square[] {\n        return neightbors.map(\n            ([di, dj]) => [sq.i + di, sq.j + dj]\n        ).filter(\n            ([i, j]) => ((i>=0)&&(i<this.height)&&(j>=0)&&(j<this.width))\n        ).map(\n            ([i, j]) => this.board[i][j]\n        );\n    }\n\n    updateValues(): void {\n        for (const row of this.board) {\n            for (const sq of row) {\n                sq.value = this.getAdjacent(sq).filter((sq)=>sq.mine).length;\n            }\n        }\n    }\n\n    generateBoard(i: number, j: number): void {\n        this.board[i][j].value = 1;\n        while (this.board[i][j].value>0 || this.board[i][j].mine) {\n            this.clearBoard();\n            this.placeMines();\n            this.updateValues();\n        }\n    }\n\n    endGame(res: \"won\" | \"lost\"): void {\n        this.result = res;\n        for (const row of this.board) {\n            for (const sq of row) {\n                sq.revealed = true;\n            }\n        }\n        this.stopTimer();\n    }\n\n    startTimer(): void {\n        this.updaterTask = setInterval(()=>{this.time++; this.updateFn(s=>s);}, 1000);\n    }\n\n    stopTimer(): void {\n        clearInterval(this.updaterTask);\n    }\n\n    reveal(sq: Square): void {\n        sq.revealed = true;\n        if (sq.mine) {\n            this.endGame(\"lost\");\n        }\n        const marked = this.getAdjacent(sq).filter(s => s.marked).length;\n        if (sq.value==marked) {\n            for (const n of this.getAdjacent(sq).filter(s=>!(s.marked||s.revealed))) {\n                this.reveal(n);\n            }\n        }\n    }\n\n    checkWin(): void {\n        let markedMine = 0;\n        for (const row of this.board) {\n            for (const sq of row) {\n                if (sq.marked && sq.mine) {\n                    markedMine++;\n                }\n            }\n        }\n        if (markedMine == this.mines) {\n            this.endGame(\"won\");\n        }\n    }\n\n    leftClick(i: number, j:number): void {\n        if (!this.started) {\n            this.generateBoard(i, j);\n            this.started = true;\n            this.startTimer();\n        }\n        this.reveal(this.board[i][j]);\n    }\n\n    rightClick(i: number, j: number): void {\n        const sq = this.board[i][j];\n        if (sq.marked) {\n            sq.marked = false;\n            this.marked--;\n        } else {\n            if (this.marked < this.mines) {\n                this.marked++;\n                sq.marked = true;\n            }\n        }\n        \n        this.checkWin();\n    }\n}\n\nexport default Game;","import Game from \"./Game\";\n\nclass Solver {\n    \n    game: Game;\n    \n    constructor(game: Game) {\n        this.game = game;\n    }\n\n    run(): void {\n        // run while making changes\n\n        let changed = true;\n        while (changed) {\n            changed = this.step();\n        }\n    }\n\n    step(): boolean {\n        // single-step and return if changed anything\n        const flagged = this.flag();\n        const revealed = this.reveal();\n        return flagged || revealed;\n    }\n\n    flag(): boolean {\n        // for each revealed cell\n        // if number - mines = #(non-revealed neightbors)\n        // flag said neightbors\n\n        let changed = false;\n\n        for (const row of this.game.board) {\n            for (const square of row) {\n                if (square.revealed) {\n                    const adj = this.game.getAdjacent(square);\n                    const nonRevealed = adj.filter(sq => !sq.revealed && !sq.marked);\n                    const mine = adj.filter(sq => sq.marked);\n                    if (nonRevealed.length == square.value - mine.length) {\n                        for (const sq of nonRevealed) {\n                            if (!sq.marked) {\n                                changed = true;\n                                this.game.rightClick(sq.i, sq.j);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return changed;\n    }\n\n    reveal(): boolean {\n        // for each revealed square\n        // if #(flagged neightbors)==value\n        // reveal unrevealed neightbors\n\n        let changed = false;\n\n        for (const row of this.game.board) {\n            for (const square of row) {\n                if (!square.revealed) {\n                    continue;\n                }\n                const adjacent = this.game.getAdjacent(square);\n                const flagged = adjacent.filter(sq => sq.marked);\n                const unrevealed = adjacent.filter(sq => !sq.revealed && !sq.marked);\n                if (flagged.length == square.value) {\n                    for (const sq of unrevealed) {\n                        changed = true;\n                        this.game.leftClick(sq.i, sq.j);\n                    }\n                }\n            }\n        }\n        return changed;\n    }\n}\n\nexport default Solver;","import {writable} from \"svelte/store\";\n\nimport Game from \"./Game\";\nimport Solver from \"./Solver\";\n\nexport interface iState {\n    game: Game;\n    solver: Solver;\n    state: string;\n}\n\nfunction makeState() {\n    const {update, subscribe} = writable<iState>({\n        game: null,\n        state: \"choose\",\n        solver: null,\n    });\n\n    update(state => {\n            const game = new Game(update);\n            const solver = new Solver(game);\n            return {...state, game, solver};\n        }\n    );\n\n    return {\n        subscribe,\n\n        startGame: (width: number, height: number, mines:number) => {\n            update(state => {\n                state.game.startGame(width, height, mines);\n                return {\n                    ...state,\n                    state: \"game\",\n                };\n            });\n        },\n\n        mark: (row, column) => {\n            update(state => {\n                state.game.rightClick(row, column);\n                return state;\n            });\n        },\n\n        reveal: (row, column) => {\n            update(state => {\n                state.game.leftClick(row, column);\n                return state;\n            });\n        },\n\n        goHighscores: () => {\n            update(state=> {\n                return {...state, state: \"select\"};\n            });\n        },\n\n        goMenu: () => {\n            update(state => {\n                return {...state, state: \"select\"};\n            });\n        },\n\n        runSolver: () => {\n            update(state => {\n                state.solver.run();\n                return state;\n            })\n        }\n    };\n}\n\nexport const state = makeState();\nexport default state;","<script>import { exclude_internal_props } from \"svelte/internal\";\n\n    import state from \"../stores.js\";\n\n    export let row, column;\n    $: sq = $state.game.board[row][column];\n\n    function mark(evt) {\n        if (!sq.revealed)\n            state.mark(row, column);\n        evt.target.blur();\n    }\n\n    function reveal(evt) {\n        if (!sq.marked)\n            state.reveal(row, column);\n        evt.target.blur();\n    }\n</script>\n\n<style>\n    button {\n        width: 2rem;\n        height: 2rem;\n        margin: 0;\n    }\n    .c1 {\n        background-color: gold;\n    }\n\n    .c2 {\n        background-color: lightgreen;\n    }\n    .c3 {\n        background-color: pink;\n    }\n    .c4 {\n        background-color: orange;\n    }\n    .c5 {\n        background-color: lightblue;\n    }\n    .c6 {\n        background-color: oliveDrab;\n    }\n    .c7 {\n        background-color: darkOrange;\n    }\n    .c8 {\n        background-color: lightSeaGreen;\n    }\n    .c0 {\n        background-color: silver;\n    }\n\n    .red {\n        color: red;\n    }\n</style>\n\n<button class={sq.revealed&&!sq.mine ? `c${sq.value}` : \"\"} class:red={sq.revealed&&(sq.mine!==sq.marked)} on:contextmenu|preventDefault={mark} on:click={reveal}>\n    {#if sq.marked}\n        ⚑\n    {:else if sq.revealed}\n        {#if sq.mine}\n            ☢\n        {:else}\n            {#if sq.value>0}\n                {sq.value}\n            {/if}\n        {/if}\n    {/if}\n</button>","<script>\n    import state from \"../stores\";\n\n    $: result = $state.game.result;\n\n    function menu() {\n        state.goMenu();\n    }\n</script>\n\n<style>\n    div {\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        justify-content: center;\n        padding: 5px;\n    }\n    .hidden {\n        visibility: hidden;\n    }\n    h4 {\n        margin: 5px;\n    }\n</style>\n\n<div class={result ? \"\" : \"hidden\"}>\n    <h4>\n        You {$state.game.result}!\n    </h4>\n    <button on:click={menu}>Back</button>\n</div>","<script>\n    import state from \"../stores\";\n\n    $: minutes = Math.floor($state.game.time/60);\n    $: seconds = $state.game.time%60;\n\n    function step() {\n        state.runSolver();\n    }\n</script>\n\n<style>\n    h2, h4 {\n        margin: 5px;\n    }\n\n    .outer {\n        display: grid;\n        grid-template-columns: 1fr 5fr 1fr;\n        width: 90%;\n        margin: 0 auto;\n        align-items: center;\n    }\n    button {\n        height: 2rem;\n    }\n</style>\n\n<div class=\"outer\">\n    <span></span>\n    <div>\n        <h2>\n            {`${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`}\n        </h2>\n        <h4>\n            Remaining: {$state.game.mines - $state.game.marked}\n        </h4>\n    </div>\n    <button on:click={step}>Hint</button>\n</div>","<script>\n    import state from \"../stores\";\n\n\timport Square from \"./Square.svelte\";\n    import GameEnd from \"./GameEnd.svelte\";\n    import Info from \"./Info.svelte\";\n\n\t$: width = $state.game.width;\n    $: height = $state.game.height;\n</script>\n\n<style>\n\t.row {\n\t\tdisplay: flex;\n        margin: 0 auto;\n        padding: 0;\n\t}\n    .table {\n        display: flex;\n        flex-direction: column;\n    }\n    .container {\n        border-style: double;\n        display: inline-block;\n        padding: 5px;\n    }\n</style>\n<div class=\"container\" on:contextmenu|preventDefault={()=>0}>\n    <Info/>\n    <div class=\"table\">\n        {#each [...Array(parseInt(height)).keys()] as i}\n            <div class=\"row\">\n                {#each [...Array(parseInt(width)).keys()] as j}\n                    <Square row={i} column={j}/>\n                {/each}\n                </div>\n        {/each}\n    </div>\n    <GameEnd/>\n</div>","<script>\n    import state from \"../stores\";\n\n    export let width, height, mines;\n\n    function click() {\n        state.startGame(width, height, mines);\n    }\n</script>\n\n<style>\n    button {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n\n<button on:click={click}>{width}x{height}<br>{mines} mines</button>\n","<script>\n    import state from \"../stores\";\n\n    let width = 10;\n    let height = 10;\n    let mines = 20;\n\n    \n    $: widthValid = width > 1;\n    $: heightValid = height > 1;\n    $: minesValid = mines < width * height;\n    $: valid = widthValid && heightValid && minesValid;\n\n    function click() {\n        if (valid)\n            state.startGame(width, height, mines);\n    }\n</script>\n\n<style>\n    button {\n        display: block;\n        margin: 0 auto;\n    }\n    div {\n        padding: 30px;\n    }\n    input {\n        text-align: center;\n        margin-bottom: 3px;\n    }\n    .hidden {\n        display: none;\n    }\n    .error {\n        background-color: red;\n        color: silver;\n        margin: 0;\n        border-radius: 5px;\n        margin-bottom: 3px;\n    }\n</style>\n\n<div>\n    <label>Width: </label><input bind:value={width}>\n    <p class=\"error\" class:hidden={widthValid}>Width is too small!</p>\n    <label>Height: </label><input bind:value={height}>\n    <p class=\"error\" class:hidden={heightValid}>Height is too small!</p>\n    <label>Mines: </label><input bind:value={mines}>\n    <p class=\"error\" class:hidden={minesValid}>Too many mines!</p>\n    <button on:click={click}>Start</button>\n</div>","<script>\n    import StarterButton from \"./StarterButton.svelte\";\n    import CustromStarter from \"./CustromStarter.svelte\";\n\n    let modes = [\n        {\n            width:8,\n            height: 8,\n            mines: 10,\n        }, \n        {\n            width: 16,\n            height: 16,\n            mines: 40,\n        },\n        {\n            width: 30,\n            height: 16,\n            mines: 99,\n        }, \n    ];\n</script>\n\n<style>\n    .container {\n        width: 50%;\n        margin: 0 auto;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-auto-rows: 1fr;\n    }\n\n    .container::before {\n        content: '';\n        width: 0;\n        padding-bottom: 100%;\n        grid-row: 1/1;\n        grid-column: 1/1;\n    }\n\n    .inner:first-child {\n        grid-row: 1/1;\n        grid-column: 1/1;\n    }\n</style>\n\n<div class=\"container\">\n    {#each modes as mode}\n        <div class=\"inner\">\n            <StarterButton {...mode}/>\n        </div>\n    {/each}\n    <div>\n        <CustromStarter/>\n    </div>\n</div>","<script>\n\timport Game from \"./game/Game.svelte\";\n\timport Starter from \"./starting/Starter.svelte\";\n\timport state from \"./stores\";\n</script>\n\n<main>\n\t{#if $state.state === \"game\"}\n\t\t<Game/>\n\t{:else}\n\t\t<Starter/>\n\t{/if}\n</main>\n\n<svelte:head>\n\t<title>Sweep-R</title>\n</svelte:head>\n\n<style>\n\t* {\n\t\tfont-family:'Courier New', Courier, monospace;\n\t}\n\n\tmain {\n\t\tmargin: 0 auto;\n\t\twidth: 80%;\n\t\tborder-style: double;\n\t\tborder-radius: 10px;\n\t\ttext-align: center;\n\t\tpadding: 20px;\n\t}\n</style>","import App from \"./App.svelte\";\n\nconst app = new App({\n    target: document.body,\n    props: {}\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","$destroy","type","index","indexOf","splice","subscriber_queue","neightbors","Game","updateFn","board","height","width","j","mine","revealed","marked","mines","started","time","result","emptyBoard","row","sq","placedMines","Math","floor","random","di","dj","getAdjacent","clearBoard","placeMines","updateValues","res","stopTimer","updaterTask","setInterval","s","clearInterval","endGame","n","reveal","markedMine","generateBoard","startTimer","checkWin","Solver","game","changed","step","flagged","flag","square","adj","nonRevealed","rightClick","adjacent","unrevealed","leftClick","state","start","stop","subscribers","set","new_value","run_queue","invalidate","subscriber","writable","solver","startGame","mark","column","goHighscores","goMenu","runSolver","makeState","$state","evt","blur","toString","padStart","minutes","seconds","parseInt","keys","widthValid","heightValid","minesValid","valid","levels","updates","to_null_out","accounted_for","$$scope","key","undefined","spread_props","body"],"mappings":"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"}